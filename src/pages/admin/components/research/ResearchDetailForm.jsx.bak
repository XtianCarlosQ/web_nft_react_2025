import React, { useState } from "react";
import { Upload, X, Plus, Link as LinkIcon } from "lucide-react";
import { useProducts } from "../../../../context/ProductsContext";

export default function ResearchDetailForm({ formData, setFormData }) {
  const [currentLang, setCurrentLang] = useState("es");
  const [newKeyword, setNewKeyword] = useState("");
  const { products } = useProducts();

  const activeProducts = products.filter((p) => !p.archived);

  const handleImageUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      setFormData((prev) => ({
        ...prev,
        localImage: event.target.result,
      }));
    };
    reader.readAsDataURL(file);
  };

  const handleAddKeyword = () => {
    if (newKeyword.trim() && !formData.keywords.includes(newKeyword.trim())) {
      setFormData((prev) => ({
        ...prev,
        keywords: [...prev.keywords, newKeyword.trim()],
      }));
      setNewKeyword("");
    }
  };

  const handleRemoveKeyword = (index) => {
    setFormData((prev) => ({
      ...prev,
      keywords: prev.keywords.filter((_, i) => i !== index),
    }));
  };

  const handleProductToggle = (productName) => {
    setFormData((prev) => {
      const isSelected = prev.products.includes(productName);
      return {
        ...prev,
        products: isSelected
          ? prev.products.filter((p) => p !== productName)
          : [...prev.products, productName],
      };
    });
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Language Toggle */}
      <div className="flex gap-2">
        <button
          onClick={() => setCurrentLang("es")}
          className={`px-4 py-2 rounded-lg font-medium transition-colors ${
            currentLang === "es"
              ? "bg-red-600 text-white"
              : "bg-gray-700 text-gray-300 hover:bg-gray-600"
          }`}
        >
          Espa√±ol (ES)
        </button>
        <button
          onClick={() => setCurrentLang("en")}
          className={`px-4 py-2 rounded-lg font-medium transition-colors ${
            currentLang === "en"
              ? "bg-red-600 text-white"
              : "bg-gray-700 text-gray-300 hover:bg-gray-600"
          }`}
        >
          Ingl√©s (EN)
        </button>
      </div>

      {/* 1. IMAGEN PORTADA (Digital Twin: aspect 16:9) */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Imagen Portada (16:9) - La imagen contiene el t√≠tulo
        </label>
        <div className="relative aspect-[16/9] border-2 border-dashed border-gray-600 rounded-lg overflow-hidden bg-gray-800 hover:border-red-500 transition-colors max-w-2xl">
          {formData.localImage ? (
            <>
              <img
                src={formData.localImage}
                alt="Preview"
                className="w-full h-full object-contain"
              />
              <button
                onClick={() =>
                  setFormData((prev) => ({ ...prev, localImage: "" }))
                }
                className="absolute top-2 right-2 p-2 bg-red-600 hover:bg-red-700 rounded-lg transition-colors"
              >
                <X className="w-4 h-4 text-white" />
              </button>
            </>
          ) : (
            <label className="absolute inset-0 flex flex-col items-center justify-center cursor-pointer">
              <Upload className="w-12 h-12 text-gray-500 mb-2" />
              <span className="text-sm text-gray-400">
                Click para subir imagen
              </span>
              <input
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="hidden"
              />
            </label>
          )}
        </div>
        <p className="text-xs text-gray-400 mt-2">
          üí° Nota: La imagen debe contener el t√≠tulo del art√≠culo. No es
          necesario campo de texto adicional.
        </p>
      </div>

      {/* 2. METADATA (Fecha + Revista) - Digital Twin */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Fecha de Publicaci√≥n
          </label>
          <input
            type="date"
            value={formData.date}
            onChange={(e) =>
              setFormData((prev) => ({ ...prev, date: e.target.value }))
            }
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">
            Revista / Journal
          </label>
          <input
            type="text"
            value={formData.journal}
            onChange={(e) =>
              setFormData((prev) => ({ ...prev, journal: e.target.value }))
            }
            placeholder="Nombre de la revista"
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
          />
        </div>
      </div>

      {/* 3. KEYWORDS - Digital Twin */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Keywords (se muestran como badges debajo de la fecha)
        </label>
        <div className="flex gap-2 mb-2">
          <input
            type="text"
            value={newKeyword}
            onChange={(e) => setNewKeyword(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleAddKeyword()}
            placeholder="Nueva keyword"
            className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
          />
          <button
            onClick={handleAddKeyword}
            className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
          >
            <Plus className="w-5 h-5" />
          </button>
        </div>
        <div className="flex flex-wrap gap-2">
          {formData.keywords.map((keyword, index) => (
            <span
              key={index}
              className="bg-gray-700 text-white text-sm px-3 py-1 rounded-full flex items-center gap-2"
            >
              {keyword}
              <button
                onClick={() => handleRemoveKeyword(index)}
                className="hover:text-red-400 transition-colors"
              >
                <X className="w-3 h-3" />
              </button>
            </span>
          ))}
        </div>
      </div>

      {/* 4. ABSTRACT / RESUMEN COMPLETO - Digital Twin */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Abstract / Resumen Completo ({currentLang.toUpperCase()})
        </label>
        <textarea
          value={formData.fullSummary?.[currentLang] || ""}
          onChange={(e) =>
            setFormData((prev) => ({
              ...prev,
              fullSummary: {
                ...prev.fullSummary,
                [currentLang]: e.target.value,
              },
            }))
          }
          placeholder="Resumen completo del art√≠culo con todos los detalles..."
          rows={8}
          className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500 resize-none"
        />
        <p className="text-xs text-gray-400 mt-2">
          ‚ÑπÔ∏è Este es el abstract completo que se muestra en la p√°gina de
          detalle. No confundir con el resumen de 30 palabras de la Vista Card.
        </p>
      </div>

      {/* 5. ENLACES (DOI + PDF) - Digital Twin */}
      <div className="space-y-3">
        <label className="block text-sm font-medium text-gray-300">
          Enlaces de Acceso a la Publicaci√≥n
        </label>

        <div>
          <label className="block text-xs text-gray-400 mb-1">
            <LinkIcon className="w-3 h-3 inline mr-1" />
            DOI (Digital Object Identifier)
          </label>
          <input
            type="url"
            value={formData.download_link_DOI || ""}
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                download_link_DOI: e.target.value,
              }))
            }
            placeholder="https://doi.org/10.xxxx/xxxxx"
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
          />
        </div>

        <div>
          <label className="block text-xs text-gray-400 mb-1">
            <LinkIcon className="w-3 h-3 inline mr-1" />
            PDF Link (Enlace directo al PDF)
          </label>
          <input
            type="url"
            value={formData.download_link_pdf || ""}
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                download_link_pdf: e.target.value,
              }))
            }
            placeholder="https://..."
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
          />
        </div>

        <div>
          <label className="block text-xs text-gray-400 mb-1">
            <LinkIcon className="w-3 h-3 inline mr-1" />
            Href (Enlace original de la publicaci√≥n)
          </label>
          <input
            type="url"
            value={formData.href || ""}
            onChange={(e) =>
              setFormData((prev) => ({ ...prev, href: e.target.value }))
            }
            placeholder="https://revista.com/articulo"
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
          />
        </div>
      </div>

      {/* 6. AUTORES - Digital Twin */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Autores (se muestran en el bloque de citaci√≥n)
        </label>
        <textarea
          value={formData.author.join(", ")}
          onChange={(e) =>
            setFormData((prev) => ({
              ...prev,
              author: e.target.value.split(",").map((a) => a.trim()),
            }))
          }
          placeholder="Apellido1, Nombre1; Apellido2, Nombre2; ..."
          rows={2}
          className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
        />
        <p className="text-xs text-gray-400 mt-1">
          Separar autores con comas. Se usar√°n en el formato de citaci√≥n
          APA/MLA.
        </p>
      </div>

      {/* 7. PRODUCTOS RELACIONADOS */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Productos Relacionados
        </label>
        <div className="space-y-2 max-h-48 overflow-y-auto bg-gray-800 rounded-lg p-3 border border-gray-700">
          {activeProducts.map((product) => {
            const productName =
              product.name?.es || product.name?.en || product.id;
            return (
              <label
                key={product.id}
                className="flex items-center gap-3 cursor-pointer hover:bg-gray-700 p-2 rounded transition-colors"
              >
                <input
                  type="checkbox"
                  checked={formData.products.includes(productName)}
                  onChange={() => handleProductToggle(productName)}
                  className="w-4 h-4 text-red-600 bg-gray-700 border-gray-600 rounded focus:ring-red-500"
                />
                <span className="text-sm text-gray-300">{productName}</span>
              </label>
            );
          })}
        </div>
      </div>

      {/* NOTA IMPORTANTE */}
      <div className="bg-gray-800 border-l-4 border-red-500 p-4 rounded-lg">
        <p className="text-sm text-gray-300">
          <strong className="text-white">üìã Formato de Citaci√≥n:</strong> El
          componente InvestigacionDetail genera autom√°ticamente las citas en
          formato APA y MLA usando los campos: autores, t√≠tulo, fecha, revista
          y DOI. No es necesario editar manualmente las citas.
        </p>
      </div>
    </div>
  );
}
        </div>

        <div>
          <label className="block text-xs text-gray-400 mb-1">
            <LinkIcon className="w-3 h-3 inline mr-1" />
            PDF
          </label>
          <input
            type="url"
            value={formData.download_link_pdf || ""}
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                download_link_pdf: e.target.value,
              }))
            }
            placeholder="https://ejemplo.com/articulo.pdf"
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
          />
        </div>

        <div>
          <label className="block text-xs text-gray-400 mb-1">
            <LinkIcon className="w-3 h-3 inline mr-1" />
            Enlace Externo (Revista/Editorial)
          </label>
          <input
            type="url"
            value={formData.href || ""}
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                href: e.target.value,
              }))
            }
            placeholder="https://revista.com/articulo"
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
          />
        </div>
      </div>

      {/* 9. KEYWORDS */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Keywords / Palabras Clave
        </label>
        <div className="flex gap-2 mb-2">
          <input
            type="text"
            value={newKeyword}
            onChange={(e) => setNewKeyword(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleAddKeyword()}
            placeholder="Nueva keyword"
            className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-500"
          />
          <button
            onClick={handleAddKeyword}
            className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
          >
            <Plus className="w-5 h-5" />
          </button>
        </div>
        <div className="flex flex-wrap gap-2">
          {formData.keywords.map((keyword, index) => (
            <span
              key={index}
              className="bg-gray-700 text-white text-sm px-3 py-1 rounded-full flex items-center gap-2"
            >
              {keyword}
              <button
                onClick={() => handleRemoveKeyword(index)}
                className="hover:text-red-400 transition-colors"
              >
                <X className="w-3 h-3" />
              </button>
            </span>
          ))}
        </div>
      </div>

      {/* 10. PRODUCTOS RELACIONADOS */}
      <div>
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Productos Relacionados
        </label>
        <div className="grid grid-cols-2 gap-3 max-h-64 overflow-y-auto bg-gray-800 rounded-lg p-4 border border-gray-700">
          {activeProducts.map((product) => {
            const productName =
              product.name?.es || product.name?.en || product.id;
            return (
              <label
                key={product.id}
                className="flex items-center gap-3 cursor-pointer hover:bg-gray-700 p-2 rounded transition-colors"
              >
                <input
                  type="checkbox"
                  checked={formData.products.includes(productName)}
                  onChange={() => handleProductToggle(productName)}
                  className="w-4 h-4 text-red-600 bg-gray-700 border-gray-600 rounded focus:ring-red-500"
                />
                <span className="text-sm text-gray-300">{productName}</span>
              </label>
            );
          })}
        </div>
      </div>
    </div>
  );
}
